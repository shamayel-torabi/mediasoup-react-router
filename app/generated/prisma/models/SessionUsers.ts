
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `SessionUsers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model SessionUsers
 * 
 */
export type SessionUsersModel = runtime.Types.Result.DefaultSelection<Prisma.$SessionUsersPayload>

export type AggregateSessionUsers = {
  _count: SessionUsersCountAggregateOutputType | null
  _min: SessionUsersMinAggregateOutputType | null
  _max: SessionUsersMaxAggregateOutputType | null
}

export type SessionUsersMinAggregateOutputType = {
  assignedAt: Date | null
  instructor: boolean | null
  userId: string | null
  sessionId: string | null
}

export type SessionUsersMaxAggregateOutputType = {
  assignedAt: Date | null
  instructor: boolean | null
  userId: string | null
  sessionId: string | null
}

export type SessionUsersCountAggregateOutputType = {
  assignedAt: number
  instructor: number
  userId: number
  sessionId: number
  _all: number
}


export type SessionUsersMinAggregateInputType = {
  assignedAt?: true
  instructor?: true
  userId?: true
  sessionId?: true
}

export type SessionUsersMaxAggregateInputType = {
  assignedAt?: true
  instructor?: true
  userId?: true
  sessionId?: true
}

export type SessionUsersCountAggregateInputType = {
  assignedAt?: true
  instructor?: true
  userId?: true
  sessionId?: true
  _all?: true
}

export type SessionUsersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SessionUsers to aggregate.
   */
  where?: Prisma.SessionUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionUsers to fetch.
   */
  orderBy?: Prisma.SessionUsersOrderByWithRelationInput | Prisma.SessionUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SessionUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SessionUsers
  **/
  _count?: true | SessionUsersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SessionUsersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SessionUsersMaxAggregateInputType
}

export type GetSessionUsersAggregateType<T extends SessionUsersAggregateArgs> = {
      [P in keyof T & keyof AggregateSessionUsers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSessionUsers[P]>
    : Prisma.GetScalarType<T[P], AggregateSessionUsers[P]>
}




export type SessionUsersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SessionUsersWhereInput
  orderBy?: Prisma.SessionUsersOrderByWithAggregationInput | Prisma.SessionUsersOrderByWithAggregationInput[]
  by: Prisma.SessionUsersScalarFieldEnum[] | Prisma.SessionUsersScalarFieldEnum
  having?: Prisma.SessionUsersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SessionUsersCountAggregateInputType | true
  _min?: SessionUsersMinAggregateInputType
  _max?: SessionUsersMaxAggregateInputType
}

export type SessionUsersGroupByOutputType = {
  assignedAt: Date
  instructor: boolean
  userId: string
  sessionId: string
  _count: SessionUsersCountAggregateOutputType | null
  _min: SessionUsersMinAggregateOutputType | null
  _max: SessionUsersMaxAggregateOutputType | null
}

type GetSessionUsersGroupByPayload<T extends SessionUsersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SessionUsersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SessionUsersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SessionUsersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SessionUsersGroupByOutputType[P]>
      }
    >
  > 



export type SessionUsersWhereInput = {
  AND?: Prisma.SessionUsersWhereInput | Prisma.SessionUsersWhereInput[]
  OR?: Prisma.SessionUsersWhereInput[]
  NOT?: Prisma.SessionUsersWhereInput | Prisma.SessionUsersWhereInput[]
  assignedAt?: Prisma.DateTimeFilter<"SessionUsers"> | Date | string
  instructor?: Prisma.BoolFilter<"SessionUsers"> | boolean
  userId?: Prisma.StringFilter<"SessionUsers"> | string
  sessionId?: Prisma.StringFilter<"SessionUsers"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  session?: Prisma.XOR<Prisma.SessionScalarRelationFilter, Prisma.SessionWhereInput>
}

export type SessionUsersOrderByWithRelationInput = {
  assignedAt?: Prisma.SortOrder
  instructor?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  session?: Prisma.SessionOrderByWithRelationInput
}

export type SessionUsersWhereUniqueInput = Prisma.AtLeast<{
  userId_sessionId?: Prisma.SessionUsersUserIdSessionIdCompoundUniqueInput
  AND?: Prisma.SessionUsersWhereInput | Prisma.SessionUsersWhereInput[]
  OR?: Prisma.SessionUsersWhereInput[]
  NOT?: Prisma.SessionUsersWhereInput | Prisma.SessionUsersWhereInput[]
  assignedAt?: Prisma.DateTimeFilter<"SessionUsers"> | Date | string
  instructor?: Prisma.BoolFilter<"SessionUsers"> | boolean
  userId?: Prisma.StringFilter<"SessionUsers"> | string
  sessionId?: Prisma.StringFilter<"SessionUsers"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  session?: Prisma.XOR<Prisma.SessionScalarRelationFilter, Prisma.SessionWhereInput>
}, "userId_sessionId">

export type SessionUsersOrderByWithAggregationInput = {
  assignedAt?: Prisma.SortOrder
  instructor?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  _count?: Prisma.SessionUsersCountOrderByAggregateInput
  _max?: Prisma.SessionUsersMaxOrderByAggregateInput
  _min?: Prisma.SessionUsersMinOrderByAggregateInput
}

export type SessionUsersScalarWhereWithAggregatesInput = {
  AND?: Prisma.SessionUsersScalarWhereWithAggregatesInput | Prisma.SessionUsersScalarWhereWithAggregatesInput[]
  OR?: Prisma.SessionUsersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SessionUsersScalarWhereWithAggregatesInput | Prisma.SessionUsersScalarWhereWithAggregatesInput[]
  assignedAt?: Prisma.DateTimeWithAggregatesFilter<"SessionUsers"> | Date | string
  instructor?: Prisma.BoolWithAggregatesFilter<"SessionUsers"> | boolean
  userId?: Prisma.StringWithAggregatesFilter<"SessionUsers"> | string
  sessionId?: Prisma.StringWithAggregatesFilter<"SessionUsers"> | string
}

export type SessionUsersCreateInput = {
  assignedAt?: Date | string
  instructor?: boolean
  user: Prisma.UserCreateNestedOneWithoutSessionsInput
  session: Prisma.SessionCreateNestedOneWithoutUsersInput
}

export type SessionUsersUncheckedCreateInput = {
  assignedAt?: Date | string
  instructor?: boolean
  userId: string
  sessionId: string
}

export type SessionUsersUpdateInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput
  session?: Prisma.SessionUpdateOneRequiredWithoutUsersNestedInput
}

export type SessionUsersUncheckedUpdateInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SessionUsersCreateManyInput = {
  assignedAt?: Date | string
  instructor?: boolean
  userId: string
  sessionId: string
}

export type SessionUsersUpdateManyMutationInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type SessionUsersUncheckedUpdateManyInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SessionUsersListRelationFilter = {
  every?: Prisma.SessionUsersWhereInput
  some?: Prisma.SessionUsersWhereInput
  none?: Prisma.SessionUsersWhereInput
}

export type SessionUsersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SessionUsersUserIdSessionIdCompoundUniqueInput = {
  userId: string
  sessionId: string
}

export type SessionUsersCountOrderByAggregateInput = {
  assignedAt?: Prisma.SortOrder
  instructor?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
}

export type SessionUsersMaxOrderByAggregateInput = {
  assignedAt?: Prisma.SortOrder
  instructor?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
}

export type SessionUsersMinOrderByAggregateInput = {
  assignedAt?: Prisma.SortOrder
  instructor?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
}

export type SessionUsersCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutUserInput, Prisma.SessionUsersUncheckedCreateWithoutUserInput> | Prisma.SessionUsersCreateWithoutUserInput[] | Prisma.SessionUsersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutUserInput | Prisma.SessionUsersCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SessionUsersCreateManyUserInputEnvelope
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
}

export type SessionUsersUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutUserInput, Prisma.SessionUsersUncheckedCreateWithoutUserInput> | Prisma.SessionUsersCreateWithoutUserInput[] | Prisma.SessionUsersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutUserInput | Prisma.SessionUsersCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SessionUsersCreateManyUserInputEnvelope
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
}

export type SessionUsersUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutUserInput, Prisma.SessionUsersUncheckedCreateWithoutUserInput> | Prisma.SessionUsersCreateWithoutUserInput[] | Prisma.SessionUsersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutUserInput | Prisma.SessionUsersCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SessionUsersUpsertWithWhereUniqueWithoutUserInput | Prisma.SessionUsersUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SessionUsersCreateManyUserInputEnvelope
  set?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  disconnect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  delete?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  update?: Prisma.SessionUsersUpdateWithWhereUniqueWithoutUserInput | Prisma.SessionUsersUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SessionUsersUpdateManyWithWhereWithoutUserInput | Prisma.SessionUsersUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SessionUsersScalarWhereInput | Prisma.SessionUsersScalarWhereInput[]
}

export type SessionUsersUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutUserInput, Prisma.SessionUsersUncheckedCreateWithoutUserInput> | Prisma.SessionUsersCreateWithoutUserInput[] | Prisma.SessionUsersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutUserInput | Prisma.SessionUsersCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SessionUsersUpsertWithWhereUniqueWithoutUserInput | Prisma.SessionUsersUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SessionUsersCreateManyUserInputEnvelope
  set?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  disconnect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  delete?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  update?: Prisma.SessionUsersUpdateWithWhereUniqueWithoutUserInput | Prisma.SessionUsersUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SessionUsersUpdateManyWithWhereWithoutUserInput | Prisma.SessionUsersUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SessionUsersScalarWhereInput | Prisma.SessionUsersScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type SessionUsersCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutSessionInput, Prisma.SessionUsersUncheckedCreateWithoutSessionInput> | Prisma.SessionUsersCreateWithoutSessionInput[] | Prisma.SessionUsersUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutSessionInput | Prisma.SessionUsersCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.SessionUsersCreateManySessionInputEnvelope
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
}

export type SessionUsersUncheckedCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutSessionInput, Prisma.SessionUsersUncheckedCreateWithoutSessionInput> | Prisma.SessionUsersCreateWithoutSessionInput[] | Prisma.SessionUsersUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutSessionInput | Prisma.SessionUsersCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.SessionUsersCreateManySessionInputEnvelope
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
}

export type SessionUsersUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutSessionInput, Prisma.SessionUsersUncheckedCreateWithoutSessionInput> | Prisma.SessionUsersCreateWithoutSessionInput[] | Prisma.SessionUsersUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutSessionInput | Prisma.SessionUsersCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.SessionUsersUpsertWithWhereUniqueWithoutSessionInput | Prisma.SessionUsersUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.SessionUsersCreateManySessionInputEnvelope
  set?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  disconnect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  delete?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  update?: Prisma.SessionUsersUpdateWithWhereUniqueWithoutSessionInput | Prisma.SessionUsersUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.SessionUsersUpdateManyWithWhereWithoutSessionInput | Prisma.SessionUsersUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.SessionUsersScalarWhereInput | Prisma.SessionUsersScalarWhereInput[]
}

export type SessionUsersUncheckedUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.SessionUsersCreateWithoutSessionInput, Prisma.SessionUsersUncheckedCreateWithoutSessionInput> | Prisma.SessionUsersCreateWithoutSessionInput[] | Prisma.SessionUsersUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionUsersCreateOrConnectWithoutSessionInput | Prisma.SessionUsersCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.SessionUsersUpsertWithWhereUniqueWithoutSessionInput | Prisma.SessionUsersUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.SessionUsersCreateManySessionInputEnvelope
  set?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  disconnect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  delete?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  connect?: Prisma.SessionUsersWhereUniqueInput | Prisma.SessionUsersWhereUniqueInput[]
  update?: Prisma.SessionUsersUpdateWithWhereUniqueWithoutSessionInput | Prisma.SessionUsersUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.SessionUsersUpdateManyWithWhereWithoutSessionInput | Prisma.SessionUsersUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.SessionUsersScalarWhereInput | Prisma.SessionUsersScalarWhereInput[]
}

export type SessionUsersCreateWithoutUserInput = {
  assignedAt?: Date | string
  instructor?: boolean
  session: Prisma.SessionCreateNestedOneWithoutUsersInput
}

export type SessionUsersUncheckedCreateWithoutUserInput = {
  assignedAt?: Date | string
  instructor?: boolean
  sessionId: string
}

export type SessionUsersCreateOrConnectWithoutUserInput = {
  where: Prisma.SessionUsersWhereUniqueInput
  create: Prisma.XOR<Prisma.SessionUsersCreateWithoutUserInput, Prisma.SessionUsersUncheckedCreateWithoutUserInput>
}

export type SessionUsersCreateManyUserInputEnvelope = {
  data: Prisma.SessionUsersCreateManyUserInput | Prisma.SessionUsersCreateManyUserInput[]
}

export type SessionUsersUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SessionUsersWhereUniqueInput
  update: Prisma.XOR<Prisma.SessionUsersUpdateWithoutUserInput, Prisma.SessionUsersUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SessionUsersCreateWithoutUserInput, Prisma.SessionUsersUncheckedCreateWithoutUserInput>
}

export type SessionUsersUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SessionUsersWhereUniqueInput
  data: Prisma.XOR<Prisma.SessionUsersUpdateWithoutUserInput, Prisma.SessionUsersUncheckedUpdateWithoutUserInput>
}

export type SessionUsersUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SessionUsersScalarWhereInput
  data: Prisma.XOR<Prisma.SessionUsersUpdateManyMutationInput, Prisma.SessionUsersUncheckedUpdateManyWithoutUserInput>
}

export type SessionUsersScalarWhereInput = {
  AND?: Prisma.SessionUsersScalarWhereInput | Prisma.SessionUsersScalarWhereInput[]
  OR?: Prisma.SessionUsersScalarWhereInput[]
  NOT?: Prisma.SessionUsersScalarWhereInput | Prisma.SessionUsersScalarWhereInput[]
  assignedAt?: Prisma.DateTimeFilter<"SessionUsers"> | Date | string
  instructor?: Prisma.BoolFilter<"SessionUsers"> | boolean
  userId?: Prisma.StringFilter<"SessionUsers"> | string
  sessionId?: Prisma.StringFilter<"SessionUsers"> | string
}

export type SessionUsersCreateWithoutSessionInput = {
  assignedAt?: Date | string
  instructor?: boolean
  user: Prisma.UserCreateNestedOneWithoutSessionsInput
}

export type SessionUsersUncheckedCreateWithoutSessionInput = {
  assignedAt?: Date | string
  instructor?: boolean
  userId: string
}

export type SessionUsersCreateOrConnectWithoutSessionInput = {
  where: Prisma.SessionUsersWhereUniqueInput
  create: Prisma.XOR<Prisma.SessionUsersCreateWithoutSessionInput, Prisma.SessionUsersUncheckedCreateWithoutSessionInput>
}

export type SessionUsersCreateManySessionInputEnvelope = {
  data: Prisma.SessionUsersCreateManySessionInput | Prisma.SessionUsersCreateManySessionInput[]
}

export type SessionUsersUpsertWithWhereUniqueWithoutSessionInput = {
  where: Prisma.SessionUsersWhereUniqueInput
  update: Prisma.XOR<Prisma.SessionUsersUpdateWithoutSessionInput, Prisma.SessionUsersUncheckedUpdateWithoutSessionInput>
  create: Prisma.XOR<Prisma.SessionUsersCreateWithoutSessionInput, Prisma.SessionUsersUncheckedCreateWithoutSessionInput>
}

export type SessionUsersUpdateWithWhereUniqueWithoutSessionInput = {
  where: Prisma.SessionUsersWhereUniqueInput
  data: Prisma.XOR<Prisma.SessionUsersUpdateWithoutSessionInput, Prisma.SessionUsersUncheckedUpdateWithoutSessionInput>
}

export type SessionUsersUpdateManyWithWhereWithoutSessionInput = {
  where: Prisma.SessionUsersScalarWhereInput
  data: Prisma.XOR<Prisma.SessionUsersUpdateManyMutationInput, Prisma.SessionUsersUncheckedUpdateManyWithoutSessionInput>
}

export type SessionUsersCreateManyUserInput = {
  assignedAt?: Date | string
  instructor?: boolean
  sessionId: string
}

export type SessionUsersUpdateWithoutUserInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  session?: Prisma.SessionUpdateOneRequiredWithoutUsersNestedInput
}

export type SessionUsersUncheckedUpdateWithoutUserInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SessionUsersUncheckedUpdateManyWithoutUserInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SessionUsersCreateManySessionInput = {
  assignedAt?: Date | string
  instructor?: boolean
  userId: string
}

export type SessionUsersUpdateWithoutSessionInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput
}

export type SessionUsersUncheckedUpdateWithoutSessionInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SessionUsersUncheckedUpdateManyWithoutSessionInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instructor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type SessionUsersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  assignedAt?: boolean
  instructor?: boolean
  userId?: boolean
  sessionId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sessionUsers"]>

export type SessionUsersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  assignedAt?: boolean
  instructor?: boolean
  userId?: boolean
  sessionId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sessionUsers"]>

export type SessionUsersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  assignedAt?: boolean
  instructor?: boolean
  userId?: boolean
  sessionId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sessionUsers"]>

export type SessionUsersSelectScalar = {
  assignedAt?: boolean
  instructor?: boolean
  userId?: boolean
  sessionId?: boolean
}

export type SessionUsersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"assignedAt" | "instructor" | "userId" | "sessionId", ExtArgs["result"]["sessionUsers"]>
export type SessionUsersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}
export type SessionUsersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}
export type SessionUsersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}

export type $SessionUsersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SessionUsers"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    session: Prisma.$SessionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    assignedAt: Date
    instructor: boolean
    userId: string
    sessionId: string
  }, ExtArgs["result"]["sessionUsers"]>
  composites: {}
}

export type SessionUsersGetPayload<S extends boolean | null | undefined | SessionUsersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload, S>

export type SessionUsersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SessionUsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SessionUsersCountAggregateInputType | true
  }

export interface SessionUsersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionUsers'], meta: { name: 'SessionUsers' } }
  /**
   * Find zero or one SessionUsers that matches the filter.
   * @param {SessionUsersFindUniqueArgs} args - Arguments to find a SessionUsers
   * @example
   * // Get one SessionUsers
   * const sessionUsers = await prisma.sessionUsers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SessionUsersFindUniqueArgs>(args: Prisma.SelectSubset<T, SessionUsersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SessionUsers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SessionUsersFindUniqueOrThrowArgs} args - Arguments to find a SessionUsers
   * @example
   * // Get one SessionUsers
   * const sessionUsers = await prisma.sessionUsers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SessionUsersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SessionUsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SessionUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionUsersFindFirstArgs} args - Arguments to find a SessionUsers
   * @example
   * // Get one SessionUsers
   * const sessionUsers = await prisma.sessionUsers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SessionUsersFindFirstArgs>(args?: Prisma.SelectSubset<T, SessionUsersFindFirstArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SessionUsers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionUsersFindFirstOrThrowArgs} args - Arguments to find a SessionUsers
   * @example
   * // Get one SessionUsers
   * const sessionUsers = await prisma.sessionUsers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SessionUsersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SessionUsersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SessionUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionUsersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SessionUsers
   * const sessionUsers = await prisma.sessionUsers.findMany()
   * 
   * // Get first 10 SessionUsers
   * const sessionUsers = await prisma.sessionUsers.findMany({ take: 10 })
   * 
   * // Only select the `assignedAt`
   * const sessionUsersWithAssignedAtOnly = await prisma.sessionUsers.findMany({ select: { assignedAt: true } })
   * 
   */
  findMany<T extends SessionUsersFindManyArgs>(args?: Prisma.SelectSubset<T, SessionUsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SessionUsers.
   * @param {SessionUsersCreateArgs} args - Arguments to create a SessionUsers.
   * @example
   * // Create one SessionUsers
   * const SessionUsers = await prisma.sessionUsers.create({
   *   data: {
   *     // ... data to create a SessionUsers
   *   }
   * })
   * 
   */
  create<T extends SessionUsersCreateArgs>(args: Prisma.SelectSubset<T, SessionUsersCreateArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SessionUsers.
   * @param {SessionUsersCreateManyArgs} args - Arguments to create many SessionUsers.
   * @example
   * // Create many SessionUsers
   * const sessionUsers = await prisma.sessionUsers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SessionUsersCreateManyArgs>(args?: Prisma.SelectSubset<T, SessionUsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SessionUsers and returns the data saved in the database.
   * @param {SessionUsersCreateManyAndReturnArgs} args - Arguments to create many SessionUsers.
   * @example
   * // Create many SessionUsers
   * const sessionUsers = await prisma.sessionUsers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SessionUsers and only return the `assignedAt`
   * const sessionUsersWithAssignedAtOnly = await prisma.sessionUsers.createManyAndReturn({
   *   select: { assignedAt: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SessionUsersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SessionUsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SessionUsers.
   * @param {SessionUsersDeleteArgs} args - Arguments to delete one SessionUsers.
   * @example
   * // Delete one SessionUsers
   * const SessionUsers = await prisma.sessionUsers.delete({
   *   where: {
   *     // ... filter to delete one SessionUsers
   *   }
   * })
   * 
   */
  delete<T extends SessionUsersDeleteArgs>(args: Prisma.SelectSubset<T, SessionUsersDeleteArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SessionUsers.
   * @param {SessionUsersUpdateArgs} args - Arguments to update one SessionUsers.
   * @example
   * // Update one SessionUsers
   * const sessionUsers = await prisma.sessionUsers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SessionUsersUpdateArgs>(args: Prisma.SelectSubset<T, SessionUsersUpdateArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SessionUsers.
   * @param {SessionUsersDeleteManyArgs} args - Arguments to filter SessionUsers to delete.
   * @example
   * // Delete a few SessionUsers
   * const { count } = await prisma.sessionUsers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SessionUsersDeleteManyArgs>(args?: Prisma.SelectSubset<T, SessionUsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SessionUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionUsersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SessionUsers
   * const sessionUsers = await prisma.sessionUsers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SessionUsersUpdateManyArgs>(args: Prisma.SelectSubset<T, SessionUsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SessionUsers and returns the data updated in the database.
   * @param {SessionUsersUpdateManyAndReturnArgs} args - Arguments to update many SessionUsers.
   * @example
   * // Update many SessionUsers
   * const sessionUsers = await prisma.sessionUsers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SessionUsers and only return the `assignedAt`
   * const sessionUsersWithAssignedAtOnly = await prisma.sessionUsers.updateManyAndReturn({
   *   select: { assignedAt: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SessionUsersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SessionUsersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SessionUsers.
   * @param {SessionUsersUpsertArgs} args - Arguments to update or create a SessionUsers.
   * @example
   * // Update or create a SessionUsers
   * const sessionUsers = await prisma.sessionUsers.upsert({
   *   create: {
   *     // ... data to create a SessionUsers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SessionUsers we want to update
   *   }
   * })
   */
  upsert<T extends SessionUsersUpsertArgs>(args: Prisma.SelectSubset<T, SessionUsersUpsertArgs<ExtArgs>>): Prisma.Prisma__SessionUsersClient<runtime.Types.Result.GetResult<Prisma.$SessionUsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SessionUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionUsersCountArgs} args - Arguments to filter SessionUsers to count.
   * @example
   * // Count the number of SessionUsers
   * const count = await prisma.sessionUsers.count({
   *   where: {
   *     // ... the filter for the SessionUsers we want to count
   *   }
   * })
  **/
  count<T extends SessionUsersCountArgs>(
    args?: Prisma.Subset<T, SessionUsersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SessionUsersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SessionUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SessionUsersAggregateArgs>(args: Prisma.Subset<T, SessionUsersAggregateArgs>): Prisma.PrismaPromise<GetSessionUsersAggregateType<T>>

  /**
   * Group by SessionUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionUsersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SessionUsersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SessionUsersGroupByArgs['orderBy'] }
      : { orderBy?: SessionUsersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SessionUsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SessionUsers model
 */
readonly fields: SessionUsersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SessionUsers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SessionUsersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  session<T extends Prisma.SessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SessionDefaultArgs<ExtArgs>>): Prisma.Prisma__SessionClient<runtime.Types.Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SessionUsers model
 */
export interface SessionUsersFieldRefs {
  readonly assignedAt: Prisma.FieldRef<"SessionUsers", 'DateTime'>
  readonly instructor: Prisma.FieldRef<"SessionUsers", 'Boolean'>
  readonly userId: Prisma.FieldRef<"SessionUsers", 'String'>
  readonly sessionId: Prisma.FieldRef<"SessionUsers", 'String'>
}
    

// Custom InputTypes
/**
 * SessionUsers findUnique
 */
export type SessionUsersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * Filter, which SessionUsers to fetch.
   */
  where: Prisma.SessionUsersWhereUniqueInput
}

/**
 * SessionUsers findUniqueOrThrow
 */
export type SessionUsersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * Filter, which SessionUsers to fetch.
   */
  where: Prisma.SessionUsersWhereUniqueInput
}

/**
 * SessionUsers findFirst
 */
export type SessionUsersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * Filter, which SessionUsers to fetch.
   */
  where?: Prisma.SessionUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionUsers to fetch.
   */
  orderBy?: Prisma.SessionUsersOrderByWithRelationInput | Prisma.SessionUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SessionUsers.
   */
  cursor?: Prisma.SessionUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SessionUsers.
   */
  distinct?: Prisma.SessionUsersScalarFieldEnum | Prisma.SessionUsersScalarFieldEnum[]
}

/**
 * SessionUsers findFirstOrThrow
 */
export type SessionUsersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * Filter, which SessionUsers to fetch.
   */
  where?: Prisma.SessionUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionUsers to fetch.
   */
  orderBy?: Prisma.SessionUsersOrderByWithRelationInput | Prisma.SessionUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SessionUsers.
   */
  cursor?: Prisma.SessionUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SessionUsers.
   */
  distinct?: Prisma.SessionUsersScalarFieldEnum | Prisma.SessionUsersScalarFieldEnum[]
}

/**
 * SessionUsers findMany
 */
export type SessionUsersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * Filter, which SessionUsers to fetch.
   */
  where?: Prisma.SessionUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionUsers to fetch.
   */
  orderBy?: Prisma.SessionUsersOrderByWithRelationInput | Prisma.SessionUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SessionUsers.
   */
  cursor?: Prisma.SessionUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionUsers.
   */
  skip?: number
  distinct?: Prisma.SessionUsersScalarFieldEnum | Prisma.SessionUsersScalarFieldEnum[]
}

/**
 * SessionUsers create
 */
export type SessionUsersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * The data needed to create a SessionUsers.
   */
  data: Prisma.XOR<Prisma.SessionUsersCreateInput, Prisma.SessionUsersUncheckedCreateInput>
}

/**
 * SessionUsers createMany
 */
export type SessionUsersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SessionUsers.
   */
  data: Prisma.SessionUsersCreateManyInput | Prisma.SessionUsersCreateManyInput[]
}

/**
 * SessionUsers createManyAndReturn
 */
export type SessionUsersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * The data used to create many SessionUsers.
   */
  data: Prisma.SessionUsersCreateManyInput | Prisma.SessionUsersCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SessionUsers update
 */
export type SessionUsersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * The data needed to update a SessionUsers.
   */
  data: Prisma.XOR<Prisma.SessionUsersUpdateInput, Prisma.SessionUsersUncheckedUpdateInput>
  /**
   * Choose, which SessionUsers to update.
   */
  where: Prisma.SessionUsersWhereUniqueInput
}

/**
 * SessionUsers updateMany
 */
export type SessionUsersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SessionUsers.
   */
  data: Prisma.XOR<Prisma.SessionUsersUpdateManyMutationInput, Prisma.SessionUsersUncheckedUpdateManyInput>
  /**
   * Filter which SessionUsers to update
   */
  where?: Prisma.SessionUsersWhereInput
  /**
   * Limit how many SessionUsers to update.
   */
  limit?: number
}

/**
 * SessionUsers updateManyAndReturn
 */
export type SessionUsersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * The data used to update SessionUsers.
   */
  data: Prisma.XOR<Prisma.SessionUsersUpdateManyMutationInput, Prisma.SessionUsersUncheckedUpdateManyInput>
  /**
   * Filter which SessionUsers to update
   */
  where?: Prisma.SessionUsersWhereInput
  /**
   * Limit how many SessionUsers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SessionUsers upsert
 */
export type SessionUsersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * The filter to search for the SessionUsers to update in case it exists.
   */
  where: Prisma.SessionUsersWhereUniqueInput
  /**
   * In case the SessionUsers found by the `where` argument doesn't exist, create a new SessionUsers with this data.
   */
  create: Prisma.XOR<Prisma.SessionUsersCreateInput, Prisma.SessionUsersUncheckedCreateInput>
  /**
   * In case the SessionUsers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SessionUsersUpdateInput, Prisma.SessionUsersUncheckedUpdateInput>
}

/**
 * SessionUsers delete
 */
export type SessionUsersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
  /**
   * Filter which SessionUsers to delete.
   */
  where: Prisma.SessionUsersWhereUniqueInput
}

/**
 * SessionUsers deleteMany
 */
export type SessionUsersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SessionUsers to delete
   */
  where?: Prisma.SessionUsersWhereInput
  /**
   * Limit how many SessionUsers to delete.
   */
  limit?: number
}

/**
 * SessionUsers without action
 */
export type SessionUsersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionUsers
   */
  select?: Prisma.SessionUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionUsers
   */
  omit?: Prisma.SessionUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionUsersInclude<ExtArgs> | null
}
